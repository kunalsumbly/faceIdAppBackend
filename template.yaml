AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  faceid-app

  Sample SAM Template for faceid-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        BUCKETNAME: !Ref UploadImageBucket
        REKOGNITIONCOLLECTION: !Ref  KinesisCollectionId
        REKOGNITIONFACEMATCHTHRESHOLD: 95

  Api:
    Cors: 
      AllowMethods: "'POST'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  ApplicationName:
    Description: Name of the application deploying for the Social Media Analytics
    Type: String
    Default: faceIdApplication

  EmailAddress:
    Description: Email address used for SNS notification whenever people are found in image/video
    Type: String
    Default: risekusu@gmail.com

  UploadImageBucket:
    Type: String
    Description: This bucket is for image upload
    Default: uploadimagekusu

  KinesisCollectionId:
    Type: String
    Description: Kinesis collection Id
    Default: faceIdAppCollection

  KinesisLambdaBucket:
    Type: String
    Description: This bucket is for kinesis lambda zip
    Default: kinesislambdabucket


Resources:
  EventMetadataStream:
    Type: "AWS::Kinesis::Stream"
    Properties: 
      Name: !Sub ${ApplicationName}-Stream
      ShardCount: 1

  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub ${ApplicationName} SNS Topic
      Subscription:
        - 
          Endpoint: !Sub ${EmailAddress}
          Protocol: email

  SNSPublishRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: lambda-comprehend-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                - 'sns:Publish'
                Resource: !Ref SNSTopic
              - 
                Effect: Allow
                Action:
                - s3:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                - dynamodb:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                    - 'kinesis:GetRecords'
                    - 'kinesis:GetShardIterator'
                    - 'kinesis:DescribeStream'
                    - 'kinesis:ListStreams'
                Resource: !GetAtt EventMetadataStream.Arn
              -
                Effect: Allow
                Action:
                    - 'kinesis:ListStreams'
                Resource: '*'
              -
                Effect: Allow
                Action:
                    - 'logs:*'
                Resource: '*'
  
  RekognitionVideoIAM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: lambda-comprehend-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'kinesis:*'
                Resource: !GetAtt EventMetadataStream.Arn
              -
                Effect: Allow
                Action:
                    - 'kinesisvideo:*'
                Resource: '*'
              -
                Effect: Allow
                Action:
                    - 'rekognition:*'
                Resource: '*'

  RekognitionVideoLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Environment:
        Variables:
          SnsTopic: !Ref SNSTopic
          PersonData: !Ref MissingPersonTable
      Handler: "kinesisvideostream/app.lambda_handler"
      Role: !GetAtt SNSPublishRole.Arn
      Code: 
        S3Bucket: "kinesislambdakusu001"
        S3Key: "lambda.zip"
      Runtime: "python3.8"
      Timeout: "500"
  
  RekognitionLambdaKinesisMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties: 
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt EventMetadataStream.Arn
      FunctionName: !GetAtt  RekognitionVideoLambda.Arn
      StartingPosition: "TRIM_HORIZON"


  UploadImageAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: "UploadImageAPI"
      StageName: Prod

  
  UploadImageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: uploadimage/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 60
      Events:
        UploadImage:
          Type: Api 
          Properties:
            Path: /upload
            Method: post
            RestApiId:
              Ref: UploadImageAPI
      Policies:
        - Statement:
          - Sid: AllowRekognitionActions
            Effect: Allow
            Action:
            - rekognition:*
            Resource: '*'
          - Sid: AllowS3Actions
            Effect: Allow
            Action:
            - s3:*
            Resource: '*'
        - DynamoDBCrudPolicy:
            TableName: !Ref MissingPersonTable
      Environment:
        Variables:
          PersonData: !Ref MissingPersonTable

  SearchImageAPIFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: searchimage/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 60
      Events:
        Register:
          Type: Api 
          Properties:
            Path: /searchimage
            Method: post
            RestApiId:
              Ref: UploadImageAPI
      Policies:
      - Statement:
        - Sid: AllowRekognitionActions
          Effect: Allow
          Action:
          - rekognition:*
          Resource: '*'
        - Sid: AllowS3Actions
          Effect: Allow
          Action:
          - s3:*
          Resource: '*'
        - Sid: AllowSNSPublish
          Effect: Allow
          Action:
          - sns:*
          Resource: !Ref SNSTopic

      - DynamoDBCrudPolicy:
            TableName: !Ref MissingPersonTable   
      Environment:
        Variables:
          PersonData: !Ref MissingPersonTable
          SnsTopic: !Ref SNSTopic

  MissingPersonTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: personrecords
      AttributeDefinitions:
        - AttributeName: faceid
          AttributeType: S
      KeySchema: 
        - AttributeName: faceid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  Api:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${UploadImageAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  KinesisDataStreamArn:
    Description: Kinesis Data Stream Arn (used in Stream Processer Input)
    Value: !GetAtt EventMetadataStream.Arn
  
  RekognitionVideoIAM:
    Description: Rekognition Video Processing IAM Arn (used in Stream Processer Input)
    Value: !GetAtt RekognitionVideoIAM.Arn
  